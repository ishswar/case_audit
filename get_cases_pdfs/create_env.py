#!/usr/bin/env python3
"""
TIBCO Support Token Extractor

This script extracts authentication tokens from a curl command and saves them to a .env file
for use with the TIBCO Support Case Manager.

Usage:
  python create_env.py command.txt
  python create_env.py --input command.txt --output .env

Where command.txt contains the curl command copied from the browser's developer tools.
"""

import os
import sys
import re
import argparse
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional


def extract_cookies_from_curl(curl_command: str) -> Dict[str, str]:
    """
    Extract cookies from a curl command string
    """
    cookies = {}
    
    # Look for the -b or --cookie parameter with cookie string
    cookie_pattern = r"-b\s+'([^']+)'|--cookie\s+'([^']+)'"
    cookie_matches = re.search(cookie_pattern, curl_command)
    
    if cookie_matches:
        # Use whichever group matched
        cookie_str = cookie_matches.group(1) or cookie_matches.group(2)
        cookie_pairs = cookie_str.split('; ')
        
        for pair in cookie_pairs:
            name, value = pair.split('=', 1)
            cookies[name] = value
    
    return cookies


def extract_required_tokens(cookies: Dict[str, str]) -> Dict[str, str]:
    """
    Extract the required tokens for the TIBCO Support Case Manager
    """
    required_tokens = {}
    
    if "opentoken" in cookies:
        required_tokens["OPENTOKEN"] = cookies["opentoken"]
    
    if "opentoken-legacy" in cookies:
        required_tokens["OPENTOKEN_LEGACY"] = cookies["opentoken-legacy"]
    
    if "csg-csm-d-zz-a-support" in cookies:
        required_tokens["CSG_TOKEN"] = cookies["csg-csm-d-zz-a-support"]
    
    # Add some optional tokens that might be useful
    if "_biz_uid" in cookies:
        required_tokens["BIZ_UID"] = cookies["_biz_uid"]
    
    if "_biz_flagsA" in cookies:
        required_tokens["BIZ_FLAGS"] = cookies["_biz_flagsA"]
    
    if "_biz_nA" in cookies:
        required_tokens["BIZ_NA"] = cookies["_biz_nA"]
    
    if "_biz_pendingA" in cookies:
        required_tokens["BIZ_PENDING"] = cookies["_biz_pendingA"]
    
    return required_tokens


def backup_file(file_path: str) -> Optional[str]:
    """
    Backup a file if it exists.
    Returns the backup file path if a backup was created, None otherwise.
    """
    if not os.path.exists(file_path):
        return None
    
    # Get the directory and filename
    file_dir = os.path.dirname(file_path) or '.'
    file_name = os.path.basename(file_path)
    
    # Create backup filename with .bak extension
    backup_path = os.path.join(file_dir, f"{file_name}.bak")
    
    # Remove existing backup if it exists
    if os.path.exists(backup_path):
        os.remove(backup_path)
    
    # Create the backup
    shutil.copy2(file_path, backup_path)
    return backup_path


def create_env_file(tokens: Dict[str, str], output_path: str) -> None:
    """
    Create a .env file with the extracted tokens
    """
    # Backup existing file
    backup_path = backup_file(output_path)
    
    with open(output_path, 'w') as f:
        f.write("# TIBCO Support Case Manager authentication tokens\n")
        f.write(f"# Generated by create_env.py on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        for name, value in tokens.items():
            f.write(f"{name}='{value}'\n")
        
        # Add some default configuration options
        f.write("\n# Default configuration\n")
        f.write("OUTPUT_DIR='tibco_cases'\n")
        f.write("SEARCH_QUERY='BW CE'\n")
        f.write("LOG_LEVEL='INFO'\n")
    
    return backup_path


def extract_tokens_from_file(input_file: str) -> Dict[str, str]:
    """
    Read the curl command from a file and extract tokens
    """
    with open(input_file, 'r') as f:
        curl_command = f.read()
    
    cookies = extract_cookies_from_curl(curl_command)
    tokens = extract_required_tokens(cookies)
    
    return tokens


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="Extract authentication tokens from a curl command and save to .env file"
    )
    parser.add_argument(
        "input_file", 
        nargs="?",
        help="File containing the curl command"
    )
    parser.add_argument(
        "--input", "-i",
        help="File containing the curl command (alternative to positional argument)"
    )
    parser.add_argument(
        "--output", "-o",
        default=".env",
        help="Output .env file path (default: .env)"
    )
    
    args = parser.parse_args()
    
    # Determine input file
    input_file = args.input_file or args.input
    if not input_file:
        parser.print_help()
        sys.exit(1)
    
    if not os.path.exists(input_file):
        print(f"Error: Input file '{input_file}' not found")
        sys.exit(1)
    
    try:
        # Extract tokens
        tokens = extract_tokens_from_file(input_file)
        
        if not tokens:
            print("Error: No required tokens found in the curl command")
            print("Make sure the command contains the -b or --cookie parameter with the required cookies")
            sys.exit(1)
        
        # Create .env file and backup any existing file
        backup_path = create_env_file(tokens, args.output)
        
        print(f"Successfully extracted tokens to '{args.output}'")
        if backup_path:
            print(f"Backup of previous file created at '{backup_path}'")
        
        print(f"Found {len(tokens)} tokens:")
        for token_name in tokens.keys():
            print(f"  - {token_name}")
        
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 